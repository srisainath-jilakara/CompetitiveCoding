class Solution {
static
{
for( int i = 0; i < 100; i++ )
numMatchingSubseq("", new String[]{});
}
public static int numMatchingSubseq(String s, String[] words) {
if(words.length == 0) return 0;
LinkedList<Node>[] nodeList = new LinkedList[26];

for(int i = 0; i < 26; i++) nodeList[i] = new LinkedList<Node>();

for(int i = 0; i < words.length; i++) nodeList[words[i].charAt(0) - 'a'].add(new Node(words[i], 0));

int matchingSubseqCount = 0;

for(char current : s.toCharArray()) {
LinkedList<Node> currentList = nodeList[current - 'a'];
int listSize = currentList.size();

for(int i = 0; i < listSize; i++) {
Node node = currentList.removeFirst();
node.index++;
if(node.index == node.word.length()) matchingSubseqCount++;
else nodeList[node.word.charAt(node.index) - 'a'].add(node);
}
}

return matchingSubseqCount;
}
}

class Node {
String word;
int index;

public Node(String word, int index) {
this.word = word;
this.index = index;
}
}

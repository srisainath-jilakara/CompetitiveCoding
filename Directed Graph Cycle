//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int tc = sc.nextInt();
        while (tc-- > 0) {
            int V = sc.nextInt();
            int E = sc.nextInt();
            int[][] edges = new int[E][2];
            for (int i = 0; i < E; i++) {
                edges[i][0] = sc.nextInt();
                edges[i][1] = sc.nextInt();
            }

            Solution obj = new Solution();
            boolean ans = obj.isCyclic(V, edges);
            System.out.println(ans ? "true" : "false");
        }
        sc.close();
    }
}
// } Driver Code Ends

class Solution {
public boolean isCyclic(int V,int edges[][]) {
boolean visited[] = new boolean[V];
int path[] = new int[V];
List<List<Integer>> adjList =  new ArrayList<>();
for(int i=0;i<V;i++) {
adjList.add(new ArrayList<>());
}
for(int edge[]: edges){
adjList.get(edge[0]).add(edge[1]);
}
for(int i=0;i<V;i++) {
if(dfs(adjList,i,visited,path))return true;
}
return false;
}
public boolean dfs( List<List<Integer>> adjList,int vertex , boolean visited[], int path[]) {
    visited[vertex]=true;
    path[vertex]=1;
for(int v: adjList.get(vertex)){
if(visited[v] && path[v]==1) return true;
else if(visited[v])continue;
dfs(adjList,v,visited,path);
}
path[vertex]=0;
return false;
}
}

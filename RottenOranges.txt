class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Point> q = new LinkedList<>();
        int m = grid.length;
        int n = grid[0].length;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                    q.add(new Point(0,i,j));
            }
        }
        int row[] = {-1,0,1,0};
        int col[]=  {0,1,0,-1};
        int ans=0;
        while(!q.isEmpty())
        {
            Point p = q.remove();
            ans = p.time;
            for(int i=0;i<4;i++)
            {
                if(isValid(p.x+row[i],p.y+col[i],grid))
                {
                    if(grid[p.x+row[i]][p.y+col[i]]==1)
                    {
                        grid[p.x+row[i]][p.y+col[i]]=2;
                        q.add(new Point(p.time+1,p.x+row[i],p.y+col[i]));
                    }
                }
            }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                    return -1;    
            }
        }
        return ans;
        
    }
    public boolean isValid(int x,int y,int arr[][])
    {
        if( (0<=x && x < arr.length )&& (0<=y && y<arr[0].length))
            return true;
        return false;
    }
}
public class Point
{
    int time;
    int x;
    int y;
    public Point(int t,int x,int y)
    {
        this.time = t;
        this.x = x;
        this.y = y;
        
    }
}
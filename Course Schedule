class Solution {

public boolean canFinish(int numCourses, int pre[][]) {
List<List<Integer>> adjList = new ArrayList<>();
int inDegree[] = new int[numCourses];
int count = 0;
Queue<Integer> queue = new LinkedList<>();
for(int i=0;i<numCourses;i++) {
adjList.add(new ArrayList<>());
}
for(int i=0;i<pre.length;i++) {
adjList.get(pre[i][0]).add(pre[i][1]);
inDegree[pre[i][1]]++;
}
for(int i=0;i<numCourses;i++) {
if(inDegree[i]==0) {
queue.add(i);
}
}

while(!queue.isEmpty()) {
int courseId = queue.poll();
count++;
for(int cId : adjList.get(courseId)) {
inDegree[cId]--;
if(inDegree[cId]==0) {
queue.offer(cId);
}
}
}
return count==numCourses;
}
}

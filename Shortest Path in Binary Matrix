class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) return -1;

        int[][] dist = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }

        dist[0][0] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0, 0}); 

        int[][] directions = {
            {-1, 0}, {0, 1}, {0, -1}, {1, 0},
            {1, 1}, {1, -1}, {-1, 1}, {-1, -1}
        };

        while (!queue.isEmpty()) {
            int[] cords = queue.poll();
            int dis = cords[0], x = cords[1], y = cords[2];

            for (int[] dir : directions) {
                int newX = x + dir[0];
                int newY = y + dir[1];

                if (isValid(newX, newY, n, grid)) {
                    if (dis + 1 < dist[newX][newY]) {
                        dist[newX][newY] = dis + 1;
                        queue.offer(new int[]{dis + 1, newX, newY});
                    }
                }
            }
        }

        return dist[n - 1][n - 1] == Integer.MAX_VALUE ? -1 : dist[n - 1][n - 1] + 1;
    }

    public boolean isValid(int x, int y, int n, int[][] grid) {
        return x >= 0 && x < n && y >= 0 && y < n && grid[x][y] == 0;
    }
}

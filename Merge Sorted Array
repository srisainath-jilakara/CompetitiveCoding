class Solution {

    private void swapIfGreater(int[] arr1, int i, int[] arr2, int j) {
        if (arr1[i] > arr2[j]) {
            int temp = arr1[i];
            arr1[i] = arr2[j];
            arr2[j] = temp;
        }
    }

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int totalLength = m + n;
        int gap = nextGap(totalLength);

        while (gap > 0) {
            int i = 0;
            int j = gap;

            while (j < totalLength) {
                // Both pointers in nums1
                if (i < m && j < m) {
                    swapIfGreater(nums1, i, nums1, j);
                }
                // i in nums1, j in nums2
                else if (i < m && j >= m) {
                    swapIfGreater(nums1, i, nums2, j - m);
                }
                // Both pointers in nums2
                else {
                    swapIfGreater(nums2, i - m, nums2, j - m);
                }
                i++;
                j++;
            }

            gap = nextGap(gap);
        }

        // Copy nums2 to nums1
        for (int i = 0; i < n; i++) {
            nums1[m + i] = nums2[i];
        }
    }

    private int nextGap(int gap) {
        if (gap <= 1) return 0;
        return (gap / 2) + (gap % 2);
    }
}

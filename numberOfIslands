import java.util.*;

class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;

        int m = grid.length;
        int n = grid[0].length;
        int[][] visited = new int[m][n];
        int number_of_islands = 0;
        int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (visited[i][j] == 0 && grid[i][j] == '1') {
                    number_of_islands++;
                    Queue<int[]> queue = new LinkedList<>();
                    queue.offer(new int[]{i, j});
                    visited[i][j] = 1; // mark visited

                    while (!queue.isEmpty()) {
                        int[] point = queue.poll();
                        for (int[] direction : directions) {
                            int newX = point[0] + direction[0];
                            int newY = point[1] + direction[1];

                            if (newX >= 0 && newX < m && newY >= 0 && newY < n &&
                                visited[newX][newY] == 0 && grid[newX][newY] == '1') {
                                visited[newX][newY] = 1;
                                queue.offer(new int[]{newX, newY});
                            }
                        }
                    }
                }
            }
        }
        return number_of_islands;
    }
}

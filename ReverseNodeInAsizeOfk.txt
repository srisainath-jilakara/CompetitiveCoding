/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
         ListNode current = head; 
       ListNode next = null; 
       ListNode prev = null; 
         
       int count = 0; 
        ListNode curr = head;
        int len = 0;
        while(curr!=null)
        {
          len++;
            curr=curr.next;
        }
        if(head==null || len<k)
            return head;
  
       /* Reverse first k nodes of linked list */
       while (count < k && current != null)  
       { 
           next = current.next; 
           current.next = prev; 
           prev = current; 
           current = next; 
           count++; 
       } 
  
       /* next is now a pointer to (k+1)th node  
          Recursively call for the list starting from current. 
          And make rest of the list as next of first node */
       if (head != null)  
          head.next = reverseKGroup(next, k); 
  
       // prev is now head of input list 
       return prev; 
        
    }
}
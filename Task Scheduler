import java.util.*;

public class Solution {

    public int leastInterval(char[] tasks, int n) {

        HashMap<Character, Integer> freq = new HashMap<>();
        for (char ch : tasks) {
            freq.put(ch, freq.getOrDefault(ch, 0) + 1);
        }

        
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        pq.addAll(freq.values()); 

       
        Queue<Pair> queue = new LinkedList<>();

        int timeTaken = 0;

       
        while (!pq.isEmpty() || !queue.isEmpty()) {
            timeTaken++;

            
            if (!pq.isEmpty()) {
                int task = pq.remove(); 
                if (task - 1 > 0) {
                    queue.offer(new Pair(task - 1, timeTaken + n));
                }
            }

            if (!queue.isEmpty() && queue.peek().time == timeTaken) {
                Pair pair = queue.poll();
                pq.offer(pair.tasks);
            }
        }

        return timeTaken;
    }
}


class Pair {
    int tasks;
    int time;

    public Pair(int tasks, int time) {
        this.tasks = tasks;
        this.time = time;
    }
}

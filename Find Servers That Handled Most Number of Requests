class Solution {
   public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
	int [] requestsCount = new int[k];
	TreeSet<Integer> available = new TreeSet<>();
	PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[0]-b[0]); // t, sid
	int n = arrival.length;
	for(int i=0;i<k;i++){
available.add(i);
}
for(int i=0;i<n;i++) {
int currentTime = arrival[i];
int timeTaken = load[i];
while(!pq.isEmpty() && pq.peek()[0]<=currentTime) {
int busyServer[] = pq.poll();
available.add(busyServer[1]);
}
if(available.isEmpty())
{
continue;
}
 Integer assignedServer = available.ceiling(i % k);
  if (assignedServer == null) {
                assignedServer = available.first(); 
    }
available.remove(assignedServer);
pq.offer(new int[]{currentTime+load[i],assignedServer});


requestsCount[assignedServer]++;


}
	int maxRequests = Arrays.stream(requestsCount).max().getAsInt();


        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (requestsCount[i] == maxRequests) {
                result.add(i);
            }
        }


	return result;
      
   }
}

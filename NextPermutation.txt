// { Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String a[] = in.readLine().trim().split("\\s+");
            int arr[] = new int[N];
            for(int i = 0;i < N;i++)
                arr[i] = Integer.parseInt(a[i]);
            
            Solution ob = new Solution();
            List<Integer> ans = new ArrayList<Integer>();
            ans = ob.nextPermutation(N, arr);
            StringBuilder out = new StringBuilder();
            for(int i = 0;i < N;i++)
                out.append(ans.get(i) + " ");
            System.out.println(out);
        }
    }
}// } Driver Code Ends


// User function Template for Java

class Solution{
    static List<Integer> nextPermutation(int N, int arr[]){
        List<Integer> res = new ArrayList<>();
        int index = -1;
        for (int i = arr.length - 1; i > 0; i--) {
        if (arr[i] > arr[i - 1]) {
            index = i - 1;
            break;
        }
    }
 
    if (index == -1) {
        reverse(arr, 0, arr.length - 1);
        for(int a = 0;a<arr.length;a++)
            res.add(arr[a]);
        return res;
    }
 
    int idx = arr.length-1;
    for (int i = arr.length-1; i >= index+1; i--) {
        if (arr[i] > arr[index]) {
            idx = i;
            break;
        }
    }
 
    swap(arr, index, idx);
 
    reverse(arr, index + 1, arr.length - 1);
        // code here
        for(int a = 0;a<arr.length;a++)
            res.add(arr[a]);
            return res;
    }
    public static void swap(int arr[] ,int i,int j)
    {
        int temp = arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    public static void reverse(int[] arr, int i, int j) {
    while (i < j) {
        swap(arr, i, j);
        i++;
        j--;
    }
}
}
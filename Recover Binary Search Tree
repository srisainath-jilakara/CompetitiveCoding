/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
	TreeNode first;
	TreeNode middle;
	TreeNode prev;
	TreeNode last;
   public void recoverTree(TreeNode root) {
first=middle=last=null;
prev = new TreeNode(Integer.MIN_VALUE);
inOrderTraversal(root);
if(first!=null && last!=null) {
swap(first,last);
}
else if(first!=null && middle!=null){
swap(first,middle);
}
   }
public void inOrderTraversal(TreeNode root) {
    if(root==null) return;
inOrderTraversal(root.left);
if(prev!=null && (root.val<prev.val)) {
if(first==null) {
first = prev;
middle =  root;
}
else {
last = root;
}
}
prev = root;
inOrderTraversal(root.right);
}
public void swap(TreeNode first, TreeNode second) {
int temp = first.val;
first.val = second.val;
second.val=temp;
}
}


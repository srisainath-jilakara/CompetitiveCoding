/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   public int widthOfBinaryTree(TreeNode root) {
	if(root==null) return 0;
	int maxWidth  = Integer.MIN_VALUE;
	Queue<Pair> queue = new LinkedList<>();
      queue.offer(new Pair(root,0));
	while(!queue.isEmpty()){
	int size = queue.size();
	int minIndex = Integer.MAX_VALUE;
	int maxIndex = Integer.MIN_VALUE;
	while(size>0){
	Pair pair = queue.poll();
minIndex = Math.min(minIndex, pair.nodeIndex);
maxIndex = Math.max(maxIndex, pair.nodeIndex);
if(pair.node.left!=null){
queue.offer(new Pair(pair.node.left,2*(pair.nodeIndex-minIndex)+1));
}
if(pair.node.right!=null){
queue.offer(new Pair(pair.node.right,2*(pair.nodeIndex-minIndex)+2));
}
size --;
}
maxWidth = Math.max(maxWidth, maxIndex-minIndex+1);
}
return maxWidth;
   }
}
class Pair {
TreeNode node ;
int nodeIndex ;
public Pair(){


}
public Pair(TreeNode node, int nodeIndex){
this.node = node;
this.nodeIndex= nodeIndex;
}
}

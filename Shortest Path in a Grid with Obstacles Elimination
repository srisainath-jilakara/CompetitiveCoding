class Solution {
    public int shortestPath(int[][] grid, int k) {
        int m = grid.length;
        int n = grid[0].length;
        boolean visited[][][] = new boolean[m][n][k + 1];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0, k});
        int directions[][] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        visited[0][0][k] = true;
        int step = 0; 

        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                int ele[] = queue.poll();
                int x = ele[0];
                int y = ele[1];
                int currentK = ele[2];

          
                if (x == m - 1 && y == n - 1) {
                    return step;
                }

                for (int i = 0; i < directions.length; i++) {
                    int newX = x + directions[i][0];
                    int newY = y + directions[i][1];

                    if (newX >= 0 && newX < m && newY >= 0 && newY < n) {
                        if (grid[newX][newY] == 0 && !visited[newX][newY][currentK]) {
                            visited[newX][newY][currentK] = true;
                            queue.offer(new int[]{newX, newY, currentK});
                        } else if (grid[newX][newY] == 1 && currentK > 0 && !visited[newX][newY][currentK - 1]) {
                            visited[newX][newY][currentK - 1] = true;
                            queue.offer(new int[]{newX, newY, currentK - 1});
                        }
                    }
                }
                size--;
            }
            step++;
        }
        return -1;
    }
}

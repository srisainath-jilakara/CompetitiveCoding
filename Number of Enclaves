class Solution {
public int numEnclaves(int grid[][]) {
int m = grid.length;
int n = grid[0].length;
boolean visited[][] = new boolean[m][n];

for(int i=0;i<n;i++) {
if(!visited[0][i] && grid[0][i]==1) {
dfs(grid,visited,0,i);
}
if(!visited[m-1][i] && grid[m-1][i]==1) {
dfs(grid,visited,m-1,i);
}
}

for(int i=0;i<m;i++) {
if(!visited[i][0] && grid[i][0]==1) {
dfs(grid,visited,i,0);
}
if(!visited[i][n-1] && grid[i][n-1]==1) {
dfs(grid,visited,i,n-1);
}
}

int count = 0;
for(int i=0;i<m;i++) {
for(int j=0;j<n;j++) {
if(!visited[i][j] && grid[i][j]==1) {
count++;
}
}
}
return count;
}

public void dfs(int[][] grid, boolean visited[][],int sr, int sc){
int directions[][] =  {{1,0},{-1,0},{0,1},{0,-1}};
visited[sr][sc] = true;
for(int direction[] : directions) {
int newX = direction[0]+sr;
int newY = direction[1]+sc;
if(0<=newX && newX<grid.length && 0<=newY && newY<grid[0].length && grid[newX][newY]==1) {
    if(visited[newX][newY]) continue;
     dfs(grid,visited,newX,newY);
}
}
}
}

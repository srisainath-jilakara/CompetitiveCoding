import java.util.Arrays;

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        return ninjaTrainingRecur(n, points);
    }

    public static int ninjaTrainingRecur(int days, int[][] points) {
       int dp[] = new int[4];

        // Base Case Initialization: For day 0, if last activity was x, what is max we can do
        dp[0] = Math.max(points[0][1], points[0][2]); // If last activity was 0 (e.g., Running), choose max of others
        dp[1] = Math.max(points[0][0], points[0][2]); // If last was 1 (Fighting)
        dp[2] = Math.max(points[0][0], points[0][1]); // If last was 2 (Learning)
        dp[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2])); // No last activity constraint

        for (int i = 1; i < days; i++) {
            int temp[] = new int[4];
            for (int last = 0; last < 4; last++) {
                for (int j = 0; j < 3; j++) {
                    if (j != last) {
                        int point = points[i][j] + dp[j];
                        temp[last] = Math.max(temp[last], point); // take the best valid activity
                    }
                }
            }
            dp = temp;
        }
        return dp[3]; // last=3 means no restriction on previous day's task
    }
}

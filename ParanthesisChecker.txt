// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class Driverclass
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        
        //Reading total number of testcases
        int t= sc.nextInt();
        
        while(t-- >0)
        {
            //reading the string
            String st = sc.next();
            
            //calling ispar method of Paranthesis class 
            //and printing "balanced" if it returns true
            //else printing "not balanced"
            if(new Parenthesis().ispar(st) == true)
                System.out.println("balanced");
            else
                System.out.println("not balanced");
        
        }
    }
}// } Driver Code Ends


class Parenthesis
{
    // Function to return if the paranthesis are balanced or not
    static boolean ispar(String x)
    {
        Stack<Character> stack = new Stack<Character>();
        
       for(int i=0;i<x.length();i++)
        {
            switch(x.charAt(i))
            {
                case '[':
                     {
                         stack.push(x.charAt(i));
                         continue;
                     }
                case '(':
                    {
                     stack.push(x.charAt(i));
                     continue;
                    }
                case '{':
                    {
                     stack.push(x.charAt(i));
                     continue;
                    }
                case ']':
                {
                    if(stack.size()==0)
                    return false;
                    if(stack.peek()=='[')
                    {
                        stack.pop();
                        continue;
                    }
                        else
                        return false;
                }
                 case ')':
                {
                    if(stack.size()==0)
                    return false;
                    if(stack.peek()=='(')
                    {
                        stack.pop();
                        continue;
                    }
                        else
                        return false;
                }
                 case '}':
                {
                    if(stack.size()==0)
                    return false;
                    if(stack.peek()=='{')
                    {
                        stack.pop();
                        continue;
                    }
                        else
                        return false;
                }
            }
           
        }
        if(stack.size()==0)
        return true;
        return false;
    }
}

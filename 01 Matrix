class Solution {
    public int[][] updateMatrix(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dis = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();

        // Initialize the distance matrix and queue with 0s
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    dis[i][j] = 0;
                    queue.offer(new int[]{i, j});
                } else {
                    dis[i][j] = -1;
                }
            }
        }

        // Call BFS to fill the distance matrix
        bfs(grid, dis, queue);
        return dis;
    }

    public void bfs(int[][] grid, int[][] dis, Queue<int[]> queue) {
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        while (!queue.isEmpty()) {
            int[] point = queue.poll();
            for (int[] direction : directions) {
                int newX = point[0] + direction[0];
                int newY = point[1] + direction[1];
                if (newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[0].length) {
                    if (dis[newX][newY] != -1) continue;
                    dis[newX][newY] = dis[point[0]][point[1]] + 1;
                    queue.offer(new int[]{newX, newY});
                }
            }
        }
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   public TreeNode buildTree(int[] preorder, int[] inorder) {
HashMap<Integer, Integer> inMap = new HashMap<>();
for(int i=0;i<inorder.length;i++) {
inMap.put(inorder[i],i);
}
      return buildTreeRecur(preorder,0,preorder.length-1,inorder,0,inorder.length-1,inMap);
}
public TreeNode buildTreeRecur(int preOrder[], int preStart, int preEnd, int inOrder[], int inStart, int inEnd, HashMap<Integer,Integer> inMap) {
if(preStart>preEnd || inStart>inEnd) return null;
TreeNode  root = new TreeNode(preOrder[preStart]);
int inRoot = inMap.get(preOrder[preStart]);
int numsLeft = inRoot - inStart;
root.left = buildTreeRecur(preOrder,preStart+1,preStart+numsLeft+1,inOrder,inStart,inRoot-1,inMap);
root.right = buildTreeRecur(preOrder,preStart+numsLeft+1,preEnd, inOrder, inRoot+1,inEnd,inMap);
return root;
}


}

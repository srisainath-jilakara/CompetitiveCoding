class Solution {
public boolean validPath(int n, int[][] edges, int source, int destination) {
    if(source == destination) return true;
List<List<Integer>> adjList = new ArrayList<>();
boolean visited[] = new boolean[n];
for(int i = 0;i<n;i++) {
adjList.add(new ArrayList<>());
}
for(int i = 0; i<edges.length;i++) {
adjList.get(edges[i][0]).add(edges[i][1]);
adjList.get(edges[i][1]).add(edges[i][0]);
}
if(dfs(source,adjList,visited,destination)) return true;
return false;


}
public boolean dfs(int v, List<List<Integer>> adjList, boolean visited[], int destination){
    visited[v] = true;
    for(int node : adjList.get(v)){
        if(node == destination) return true;
        if(!visited[node] && dfs(node, adjList, visited, destination))
            return true;
    }
    return false;
}



}
